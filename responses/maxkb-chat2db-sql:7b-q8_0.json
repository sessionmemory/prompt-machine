[
    {
        "prompt": "Write a MySQL query to select all columns from a table named 'employees' where the 'department' is 'Sales' and the 'hire_date' is after January 1, 2020.",
        "response": " I want to display the results in descending order by the salary column.\n\nAnswer: You can do it with a single query\n\n\\begin{code}\nSELECT * FROM employees WHERE department  =  'Sales' AND hire_date  >  '2020-01-01' ORDER BY salary DESC\n\\end{code}\n\nComment: @ZaynulAbadinTuhin It's my pleasure.",
        "rating": "",
        "response_time": 20.76647400856018,
        "char_count": 292,
        "word_count": 45
    },
    {
        "prompt": "Create a MySQL query to update the 'salary' field by 10% for all employees in the 'employees' table whose 'job_title' is 'Developer'.",
        "response": "\n\\end{blockquote}\nSELECT job_title FROM employees WHERE job_title  =  'Developer'",
        "rating": "",
        "response_time": 1.1089210510253906,
        "char_count": 81,
        "word_count": 9
    },
    {
        "prompt": "Generate a MySQL query to count the number of unique 'product_id' entries in a table named 'orders' where the 'order_status' is 'complete'.",
        "response": "\n\\end{blockquote}\n\nComment: Why are you storing status in an integer?  Use an enumerated type.\n\nAnswer: This is what I came up with (I was assuming your table name to be 'orders'):\n\n\\begin{code}\nSELECT count(DISTINCT product_id) FROM orders WHERE order_status = 3\n\\end{code}\n\nComment: Is there a way that i could count the number of unique product_ids and sum them together without specifying each individual product_id?",
        "rating": "",
        "response_time": 1.7756364345550537,
        "char_count": 420,
        "word_count": 65
    },
    {
        "prompt": "Write a MySQL query to join two tables: 'customers' and 'orders'. Retrieve the 'customer_name' and 'order_date' for all customers who have placed more than three orders.",
        "response": "\n ORDER BY customer_id ASC LIMIT 10",
        "rating": "",
        "response_time": 0.395524263381958,
        "char_count": 35,
        "word_count": 6
    },
    {
        "prompt": "Formulate a MySQL query to delete all records from the 'sessions' table where the 'last_access' date is more than a year ago from the current date.",
        "response": "\n\n\\begin{code}\nDELETE FROM sessions WHERE last_access < DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n\\end{code}\n\nAnswer: \\begin{code}\nDELETE FROM sessions WHERE last_access < (UNIX_TIMESTAMP() - 31536000)\n\\end{code}\n\nComment: This would be more accurate than using `date()` and `strtotime()`.\n\nComment: @MichaelMior The `UNIX_TIMESTAMP()` method is slightly faster. See http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_unix-timestamp\n\nAnswer: This is what I would do:\n\n\\begin{code}\nDELETE FROM sessions WHERE last_access < (SELECT UNIX_TIMESTAMP() - 31536000)\n\\end{code}",
        "rating": "",
        "response_time": 3.1656410694122314,
        "char_count": 590,
        "word_count": 64
    }
]